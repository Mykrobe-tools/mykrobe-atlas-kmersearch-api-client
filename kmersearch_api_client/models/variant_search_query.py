# coding: utf-8

"""
    K-mer Search API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kmersearch_api_client.configuration import Configuration


class VariantSearchQuery(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ref': 'str',
        'pos': 'int',
        'alt': 'str',
        'gene': 'str',
        'genbank': 'str'
    }

    attribute_map = {
        'ref': 'ref',
        'pos': 'pos',
        'alt': 'alt',
        'gene': 'gene',
        'genbank': 'genbank'
    }

    def __init__(self, ref=None, pos=None, alt=None, gene=None, genbank=None, local_vars_configuration=None):  # noqa: E501
        """VariantSearchQuery - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ref = None
        self._pos = None
        self._alt = None
        self._gene = None
        self._genbank = None
        self.discriminator = None

        if ref is not None:
            self.ref = ref
        if pos is not None:
            self.pos = pos
        if alt is not None:
            self.alt = alt
        if gene is not None:
            self.gene = gene
        if genbank is not None:
            self.genbank = genbank

    @property
    def ref(self):
        """Gets the ref of this VariantSearchQuery.  # noqa: E501


        :return: The ref of this VariantSearchQuery.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this VariantSearchQuery.


        :param ref: The ref of this VariantSearchQuery.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def pos(self):
        """Gets the pos of this VariantSearchQuery.  # noqa: E501


        :return: The pos of this VariantSearchQuery.  # noqa: E501
        :rtype: int
        """
        return self._pos

    @pos.setter
    def pos(self, pos):
        """Sets the pos of this VariantSearchQuery.


        :param pos: The pos of this VariantSearchQuery.  # noqa: E501
        :type: int
        """

        self._pos = pos

    @property
    def alt(self):
        """Gets the alt of this VariantSearchQuery.  # noqa: E501


        :return: The alt of this VariantSearchQuery.  # noqa: E501
        :rtype: str
        """
        return self._alt

    @alt.setter
    def alt(self, alt):
        """Sets the alt of this VariantSearchQuery.


        :param alt: The alt of this VariantSearchQuery.  # noqa: E501
        :type: str
        """

        self._alt = alt

    @property
    def gene(self):
        """Gets the gene of this VariantSearchQuery.  # noqa: E501


        :return: The gene of this VariantSearchQuery.  # noqa: E501
        :rtype: str
        """
        return self._gene

    @gene.setter
    def gene(self, gene):
        """Sets the gene of this VariantSearchQuery.


        :param gene: The gene of this VariantSearchQuery.  # noqa: E501
        :type: str
        """

        self._gene = gene

    @property
    def genbank(self):
        """Gets the genbank of this VariantSearchQuery.  # noqa: E501


        :return: The genbank of this VariantSearchQuery.  # noqa: E501
        :rtype: str
        """
        return self._genbank

    @genbank.setter
    def genbank(self, genbank):
        """Sets the genbank of this VariantSearchQuery.


        :param genbank: The genbank of this VariantSearchQuery.  # noqa: E501
        :type: str
        """

        self._genbank = genbank

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VariantSearchQuery):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VariantSearchQuery):
            return True

        return self.to_dict() != other.to_dict()
