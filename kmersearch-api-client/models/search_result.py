# coding: utf-8

"""
    K-mer Search API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kmersearch-api-client.configuration import Configuration


class SearchResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'percent_kmers_found': 'float',
        'num_kmers_found': 'int',
        'num_kmers': 'int',
        'sample_name': 'str'
    }

    attribute_map = {
        'percent_kmers_found': 'percent_kmers_found',
        'num_kmers_found': 'num_kmers_found',
        'num_kmers': 'num_kmers',
        'sample_name': 'sample_name'
    }

    def __init__(self, percent_kmers_found=None, num_kmers_found=None, num_kmers=None, sample_name=None, local_vars_configuration=None):  # noqa: E501
        """SearchResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._percent_kmers_found = None
        self._num_kmers_found = None
        self._num_kmers = None
        self._sample_name = None
        self.discriminator = None

        if percent_kmers_found is not None:
            self.percent_kmers_found = percent_kmers_found
        if num_kmers_found is not None:
            self.num_kmers_found = num_kmers_found
        if num_kmers is not None:
            self.num_kmers = num_kmers
        if sample_name is not None:
            self.sample_name = sample_name

    @property
    def percent_kmers_found(self):
        """Gets the percent_kmers_found of this SearchResult.  # noqa: E501


        :return: The percent_kmers_found of this SearchResult.  # noqa: E501
        :rtype: float
        """
        return self._percent_kmers_found

    @percent_kmers_found.setter
    def percent_kmers_found(self, percent_kmers_found):
        """Sets the percent_kmers_found of this SearchResult.


        :param percent_kmers_found: The percent_kmers_found of this SearchResult.  # noqa: E501
        :type: float
        """

        self._percent_kmers_found = percent_kmers_found

    @property
    def num_kmers_found(self):
        """Gets the num_kmers_found of this SearchResult.  # noqa: E501


        :return: The num_kmers_found of this SearchResult.  # noqa: E501
        :rtype: int
        """
        return self._num_kmers_found

    @num_kmers_found.setter
    def num_kmers_found(self, num_kmers_found):
        """Sets the num_kmers_found of this SearchResult.


        :param num_kmers_found: The num_kmers_found of this SearchResult.  # noqa: E501
        :type: int
        """

        self._num_kmers_found = num_kmers_found

    @property
    def num_kmers(self):
        """Gets the num_kmers of this SearchResult.  # noqa: E501


        :return: The num_kmers of this SearchResult.  # noqa: E501
        :rtype: int
        """
        return self._num_kmers

    @num_kmers.setter
    def num_kmers(self, num_kmers):
        """Sets the num_kmers of this SearchResult.


        :param num_kmers: The num_kmers of this SearchResult.  # noqa: E501
        :type: int
        """

        self._num_kmers = num_kmers

    @property
    def sample_name(self):
        """Gets the sample_name of this SearchResult.  # noqa: E501


        :return: The sample_name of this SearchResult.  # noqa: E501
        :rtype: str
        """
        return self._sample_name

    @sample_name.setter
    def sample_name(self, sample_name):
        """Sets the sample_name of this SearchResult.


        :param sample_name: The sample_name of this SearchResult.  # noqa: E501
        :type: str
        """

        self._sample_name = sample_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchResult):
            return True

        return self.to_dict() != other.to_dict()
